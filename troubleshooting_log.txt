# Azure Functions BigQuery → CosmosDB 모듈화 트러블슈팅 로그

## Metadata
- Timestamp: 2024-12-19 15:30:00 KST
- Severity: Low
- Impacted Systems: storeToCosmos Azure Function
- Tags: 모듈화, Azure Functions, BigQuery, CosmosDB, 코드 리팩토링

## Problem Summary
기존 Azure Functions 코드가 단일 파일(247줄)에 모든 로직이 집중되어 있어 유지보수와 확장성이 어려운 상황이었습니다. 코드의 가독성과 재사용성을 개선하기 위해 모듈화가 필요했습니다.

## Root Cause
- 단일 파일에 모든 기능이 집중되어 코드 복잡도가 높음
- 설정, 클라이언트 초기화, 쿼리, 데이터 처리 로직이 분리되지 않음
- 테스트와 디버깅이 어려운 구조
- 새로운 기능 추가 시 기존 코드 수정이 필요

## Resolution Steps
1. **설정 분리**: `config.py` 모듈 생성으로 환경 변수와 설정 관리
2. **클라이언트 관리**: `clients.py`에 `ClientManager` 클래스로 BigQuery/CosmosDB 클라이언트 초기화
3. **쿼리 관리**: `queries.py`에 `BigQueryQueries` 클래스로 쿼리 정의
4. **데이터 처리**: `data_processors.py`에 `DataProcessor` 클래스로 데이터 변환 로직
5. **모델 정의**: `models.py`에 dataclass를 사용한 데이터 모델 정의
6. **유틸리티**: `utils.py`에 성능 모니터링, 에러 처리, 로깅 유틸리티
7. **메인 함수 간소화**: `__init__.py`를 35줄로 간소화
8. **시간대 오류 수정**: `time_utils.py`에서 pytz 사용으로 UTC 시간대 오류 해결
9. **안전한 속성 접근**: 모든 row 속성 접근을 getattr()로 변경하여 AttributeError 방지
10. **환경 변수 검증**: config.py에 환경 변수 검증 로직 추가
11. **에러 처리 강화**: 개별 행 처리 오류 시에도 전체 프로세스 계속 진행
12. **BigQuery Iterator 오류 수정**: RowIterator 중복 순회 문제 해결

## Error Message / Logs
**발견된 오류 1:**
```
'No time zone found with key UTC'
행 처리 중 오류 발생 (visitorId: 64ff6c97-a13a-4442-816d-0e29a23095b1): 'No time zone found with key UTC'
```

**발견된 오류 2:**
```
('Iterator has already started', <google.cloud.bigquery.table.RowIterator object at 0x00000161A40FAC10>)
```

**해결 방법:**
1. time_utils.py에서 zoneinfo 대신 pytz 사용
2. requirements.txt에 pytz 패키지 추가
3. 모든 row 속성 접근을 getattr()로 안전하게 변경
4. BigQuery RowIterator 중복 순회 문제 해결 (len(list(rows)) 제거)

**기존 코드 구조:**
```python
# 247줄의 단일 파일
import os, logging, json, uuid, azure.functions as func
from google.cloud import bigquery
from google.oauth2 import service_account
from azure.cosmos import CosmosClient, PartitionKey
# ... 모든 로직이 하나의 파일에 집중
```

**모듈화 후 구조:**
```python
# __init__.py (35줄)
from .clients import client_manager
from .queries import BigQueryQueries
from .data_processors import DataProcessor
# 깔끔한 메인 함수
```

## Related Commits or Pull Requests
- 모듈화 작업: 8개 파일 생성 (config.py, clients.py, queries.py, data_processors.py, models.py, utils.py, README.md)
- 기존 __init__.py 파일 리팩토링

## Reproduction Steps
1. 기존 단일 파일 구조 확인
2. 각 기능별로 모듈 분리 계획 수립
3. 의존성 관계 분석 후 모듈 생성 순서 결정
4. 각 모듈별 클래스 및 함수 정의
5. 메인 함수에서 모듈 import하여 사용

## Prevention / Lessons Learned
- Azure Functions에서도 모듈화가 가능하고 권장됨
- 설정과 로직을 분리하면 환경별 배포가 용이
- 클래스 기반 구조로 테스트 작성이 쉬워짐
- 유틸리티 함수 분리로 코드 재사용성 향상
- README 작성으로 프로젝트 이해도 증대

## Related Links
- Azure Functions Python 개발 가이드
- Google Cloud BigQuery Python 클라이언트 문서
- Azure CosmosDB Python SDK 문서

---

## Metadata
- Timestamp: 2024-12-19 16:45:00 KST
- Severity: Critical
- Impacted Systems: GitHub Repository, Git Push Process
- Tags: 보안, GitHub, 서비스 계정 키, 푸시 보호

## Problem Summary
GitHub에 코드를 푸시할 때 서비스 계정 키 파일(service_account_key.json)이 보안 위반으로 감지되어 푸시가 차단되었습니다. GitHub의 Push Protection 기능이 Google Cloud 서비스 계정 자격 증명을 감지하여 푸시를 거부했습니다.

## Root Cause
- 서비스 계정 키 파일이 Git 저장소에 포함되어 커밋됨
- GitHub의 자동 보안 스캔이 민감한 자격 증명을 감지
- .gitignore에 파일이 추가되었지만 이미 커밋 히스토리에 포함된 상태
- Push Protection이 활성화되어 있어 보안 위반 시 푸시 차단

## Resolution Steps
1. **파일 추적 제거**: `git rm --cached service_account_key.json`로 Git 추적에서 제거
2. **커밋 히스토리 정리**: `git filter-branch`를 사용하여 커밋 히스토리에서 민감한 파일 완전 제거
3. **강제 푸시**: `git push --force`로 정리된 히스토리로 원격 저장소 업데이트
4. **보안 확인**: GitHub에서 보안 위반 해제 확인

## Error Message / Logs
```
remote: error: GH013: Repository rule violations found for refs/heads/main.
remote: 
remote: - GITHUB PUSH PROTECTION
remote:   —————————————————————————————————————————
remote:     Resolve the following violations before pushing again
remote:
remote:     - Push cannot contain secrets
remote:
remote:       —— Google Cloud Service Account Credentials ——————————
remote:        locations:
remote:          - commit: 5103ff8d86d1f0f829aa40ceec98cc0252333155
remote:            path: service_account_key.json:1
```

## Related Commits or Pull Requests
- 커밋 5103ff8d86d1f0f829aa40ceec98cc0252333155에서 서비스 계정 키 포함
- .gitignore 업데이트로 향후 민감한 파일 추적 방지

## Reproduction Steps
1. 민감한 파일(API 키, 서비스 계정 키 등)을 Git 저장소에 추가
2. GitHub에 푸시 시도
3. Push Protection이 자동으로 보안 위반 감지
4. 푸시 거부 및 보안 경고 표시

## Prevention / Lessons Learned
- 민감한 파일은 항상 .gitignore에 추가 후 커밋
- 서비스 계정 키는 환경 변수나 Azure Key Vault 사용 권장
- GitHub의 Push Protection 기능 활용으로 보안 강화
- 커밋 전에 민감한 정보 포함 여부 확인 필요
- 정기적인 보안 스캔으로 저장소 보안 상태 점검

## Related Links
- GitHub Push Protection 문서
- Google Cloud 서비스 계정 보안 가이드
- Azure Key Vault 서비스 계정 키 관리 